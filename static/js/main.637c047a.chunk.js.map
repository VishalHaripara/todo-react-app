{"version":3,"sources":["logo.png","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ListItems","props","listItems","items","map","item","react_default","a","createElement","className","key","type","id","value","text","onChange","e","setUpdate","target","index_esm","onClick","deleteItem","icon","react_flip_move_es","duration","easing","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentItem","addItem","bind","assertThisInitialized","handleInput","preventDefault","newItem","concat","toConsumableArray","setState","Date","now","filteredItems","filter","console","log","Fragment","react_router_dom","src","logo","alt","to","style","textDecoration","color","onSubmit","placeholder","src_ListItems","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.637c047a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8c7158bc.png\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { GoTrashcan } from 'react-icons/go';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input type=\"text\" \r\n                    id={item.key} \r\n                    value = {item.text}\r\n                    onChange ={\r\n                        (e) =>{\r\n                            props.setUpdate(e.target.value, item.key)\r\n                        }\r\n                    }\r\n                    />\r\n                    <span>\r\n                        <GoTrashcan className=\"faicons\" onClick={ () => \r\n                            {props.deleteItem(item.key)}\r\n                        }\r\n                        icon=\"GoTrashcan\" />\r\n                    </span>\r\n                </p>\r\n            </div>\r\n        })\r\n    return(\r\n    <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n    </div>\r\n    )\r\n}\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './ListItems';\nimport { BrowserRouter as Router,\tRoute,\tLink,\tSwitch } from 'react-router-dom';\nimport logo from './logo.png'; \n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        text:\"\",\n        key:\"\"\n      }\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  \n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text!==\"\"){\n      const items=[...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key!==key);\n      this.setState({\n        items: filteredItems\n      })\n  }\n\n  setUpdate(text, key){\n    console.log(\"items:\"+this.state.items);\n    const items = this.state.items;\n    items.map(item =>{\n      if(item.key===key){\n        console.log(item.key +\"    \"+key)\n        item.text=text;\n      }\n    })\n    this.setState({\n      items: items\n    })\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <div className=\"MyApp\">\n              <ul>\n                <li className=\"logo\"><img src={logo} alt=\"Logo\" /></li>\n                <li><Link to=\"/\" style={{ textDecoration: 'none',color:'#19a0fa' }}>Home</Link></li>\n                <li><Link to=\"/contact\" style={{ textDecoration: 'none' ,color:'rgb(252, 123, 3)'}}>Contact Us</Link></li> \n                <li><Link to=\"/about\" style={{ textDecoration: 'none',color:'rgb(252, 123, 3)'}}>About Us</Link></li> \n              </ul>  \n          </div>\n        </Router>\n        <div className=\"App\">\n          <header>\n              <form id=\"to-do-form\" onSubmit={this.addItem}>\n                <input type=\"text\" placeholder=\"Enter Task\"\n                value={this.state.currentItem.text}\n                onChange={this.handleInput}></input>\n                <button type=\"submit\">Add</button>\n              </form>\n              <p>{this.state.items.text}</p>        \n                <ListItems items = {this.state.items}\n                deleteItem = {this.deleteItem}\n                setUpdate = {this.setUpdate}>\n                </ListItems>\n          </header>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}